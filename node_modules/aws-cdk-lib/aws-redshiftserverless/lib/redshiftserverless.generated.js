"use strict";var _a,_b;Object.defineProperty(exports,"__esModule",{value:!0}),exports.CfnWorkgroup=exports.CfnNamespace=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),cdk=require("../../core"),cfn_parse=require("../../core/lib/helpers-internal");function CfnNamespacePropsValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("adminUserPassword",cdk.validateString)(properties.adminUserPassword)),errors.collect(cdk.propertyValidator("adminUsername",cdk.validateString)(properties.adminUsername)),errors.collect(cdk.propertyValidator("dbName",cdk.validateString)(properties.dbName)),errors.collect(cdk.propertyValidator("defaultIamRoleArn",cdk.validateString)(properties.defaultIamRoleArn)),errors.collect(cdk.propertyValidator("finalSnapshotName",cdk.validateString)(properties.finalSnapshotName)),errors.collect(cdk.propertyValidator("finalSnapshotRetentionPeriod",cdk.validateNumber)(properties.finalSnapshotRetentionPeriod)),errors.collect(cdk.propertyValidator("iamRoles",cdk.listValidator(cdk.validateString))(properties.iamRoles)),errors.collect(cdk.propertyValidator("kmsKeyId",cdk.validateString)(properties.kmsKeyId)),errors.collect(cdk.propertyValidator("logExports",cdk.listValidator(cdk.validateString))(properties.logExports)),errors.collect(cdk.propertyValidator("namespaceName",cdk.requiredValidator)(properties.namespaceName)),errors.collect(cdk.propertyValidator("namespaceName",cdk.validateString)(properties.namespaceName)),errors.collect(cdk.propertyValidator("tags",cdk.listValidator(cdk.validateCfnTag))(properties.tags)),errors.wrap('supplied properties not correct for "CfnNamespaceProps"')}function cfnNamespacePropsToCloudFormation(properties){return cdk.canInspect(properties)?(CfnNamespacePropsValidator(properties).assertSuccess(),{NamespaceName:cdk.stringToCloudFormation(properties.namespaceName),AdminUsername:cdk.stringToCloudFormation(properties.adminUsername),AdminUserPassword:cdk.stringToCloudFormation(properties.adminUserPassword),DbName:cdk.stringToCloudFormation(properties.dbName),DefaultIamRoleArn:cdk.stringToCloudFormation(properties.defaultIamRoleArn),FinalSnapshotName:cdk.stringToCloudFormation(properties.finalSnapshotName),FinalSnapshotRetentionPeriod:cdk.numberToCloudFormation(properties.finalSnapshotRetentionPeriod),IamRoles:cdk.listMapper(cdk.stringToCloudFormation)(properties.iamRoles),KmsKeyId:cdk.stringToCloudFormation(properties.kmsKeyId),LogExports:cdk.listMapper(cdk.stringToCloudFormation)(properties.logExports),Tags:cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)}):properties}function CfnNamespacePropsFromCloudFormation(properties){if(properties=properties??{},typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("namespaceName","NamespaceName",cfn_parse.FromCloudFormation.getString(properties.NamespaceName)),ret.addPropertyResult("adminUsername","AdminUsername",properties.AdminUsername!=null?cfn_parse.FromCloudFormation.getString(properties.AdminUsername):void 0),ret.addPropertyResult("adminUserPassword","AdminUserPassword",properties.AdminUserPassword!=null?cfn_parse.FromCloudFormation.getString(properties.AdminUserPassword):void 0),ret.addPropertyResult("dbName","DbName",properties.DbName!=null?cfn_parse.FromCloudFormation.getString(properties.DbName):void 0),ret.addPropertyResult("defaultIamRoleArn","DefaultIamRoleArn",properties.DefaultIamRoleArn!=null?cfn_parse.FromCloudFormation.getString(properties.DefaultIamRoleArn):void 0),ret.addPropertyResult("finalSnapshotName","FinalSnapshotName",properties.FinalSnapshotName!=null?cfn_parse.FromCloudFormation.getString(properties.FinalSnapshotName):void 0),ret.addPropertyResult("finalSnapshotRetentionPeriod","FinalSnapshotRetentionPeriod",properties.FinalSnapshotRetentionPeriod!=null?cfn_parse.FromCloudFormation.getNumber(properties.FinalSnapshotRetentionPeriod):void 0),ret.addPropertyResult("iamRoles","IamRoles",properties.IamRoles!=null?cfn_parse.FromCloudFormation.getStringArray(properties.IamRoles):void 0),ret.addPropertyResult("kmsKeyId","KmsKeyId",properties.KmsKeyId!=null?cfn_parse.FromCloudFormation.getString(properties.KmsKeyId):void 0),ret.addPropertyResult("logExports","LogExports",properties.LogExports!=null?cfn_parse.FromCloudFormation.getStringArray(properties.LogExports):void 0),ret.addPropertyResult("tags","Tags",properties.Tags!=null?cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnNamespace extends cdk.CfnResource{constructor(scope,id,props){super(scope,id,{type:CfnNamespace.CFN_RESOURCE_TYPE_NAME,properties:props});try{jsiiDeprecationWarnings.aws_cdk_lib_aws_redshiftserverless_CfnNamespaceProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CfnNamespace),error}cdk.requireProperty(props,"namespaceName",this),this.namespaceName=props.namespaceName,this.adminUsername=props.adminUsername,this.adminUserPassword=props.adminUserPassword,this.dbName=props.dbName,this.defaultIamRoleArn=props.defaultIamRoleArn,this.finalSnapshotName=props.finalSnapshotName,this.finalSnapshotRetentionPeriod=props.finalSnapshotRetentionPeriod,this.iamRoles=props.iamRoles,this.kmsKeyId=props.kmsKeyId,this.logExports=props.logExports,this.tags=new cdk.TagManager(cdk.TagType.STANDARD,"AWS::RedshiftServerless::Namespace",props.tags,{tagPropertyName:"tags"})}static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnNamespacePropsFromCloudFormation(resourceProperties),ret=new CfnNamespace(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}inspect(inspector){try{jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.inspect),error}inspector.addAttribute("aws:cdk:cloudformation:type",CfnNamespace.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}get cfnProperties(){return{namespaceName:this.namespaceName,adminUsername:this.adminUsername,adminUserPassword:this.adminUserPassword,dbName:this.dbName,defaultIamRoleArn:this.defaultIamRoleArn,finalSnapshotName:this.finalSnapshotName,finalSnapshotRetentionPeriod:this.finalSnapshotRetentionPeriod,iamRoles:this.iamRoles,kmsKeyId:this.kmsKeyId,logExports:this.logExports,tags:this.tags.renderTags()}}renderProperties(props){return cfnNamespacePropsToCloudFormation(props)}}exports.CfnNamespace=CfnNamespace,_a=JSII_RTTI_SYMBOL_1,CfnNamespace[_a]={fqn:"aws-cdk-lib.aws_redshiftserverless.CfnNamespace",version:"2.50.0"},CfnNamespace.CFN_RESOURCE_TYPE_NAME="AWS::RedshiftServerless::Namespace";function CfnWorkgroupPropsValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("baseCapacity",cdk.validateNumber)(properties.baseCapacity)),errors.collect(cdk.propertyValidator("configParameters",cdk.listValidator(CfnWorkgroup_ConfigParameterPropertyValidator))(properties.configParameters)),errors.collect(cdk.propertyValidator("enhancedVpcRouting",cdk.validateBoolean)(properties.enhancedVpcRouting)),errors.collect(cdk.propertyValidator("namespaceName",cdk.validateString)(properties.namespaceName)),errors.collect(cdk.propertyValidator("publiclyAccessible",cdk.validateBoolean)(properties.publiclyAccessible)),errors.collect(cdk.propertyValidator("securityGroupIds",cdk.listValidator(cdk.validateString))(properties.securityGroupIds)),errors.collect(cdk.propertyValidator("subnetIds",cdk.listValidator(cdk.validateString))(properties.subnetIds)),errors.collect(cdk.propertyValidator("tags",cdk.listValidator(cdk.validateCfnTag))(properties.tags)),errors.collect(cdk.propertyValidator("workgroupName",cdk.requiredValidator)(properties.workgroupName)),errors.collect(cdk.propertyValidator("workgroupName",cdk.validateString)(properties.workgroupName)),errors.wrap('supplied properties not correct for "CfnWorkgroupProps"')}function cfnWorkgroupPropsToCloudFormation(properties){return cdk.canInspect(properties)?(CfnWorkgroupPropsValidator(properties).assertSuccess(),{WorkgroupName:cdk.stringToCloudFormation(properties.workgroupName),BaseCapacity:cdk.numberToCloudFormation(properties.baseCapacity),ConfigParameters:cdk.listMapper(cfnWorkgroupConfigParameterPropertyToCloudFormation)(properties.configParameters),EnhancedVpcRouting:cdk.booleanToCloudFormation(properties.enhancedVpcRouting),NamespaceName:cdk.stringToCloudFormation(properties.namespaceName),PubliclyAccessible:cdk.booleanToCloudFormation(properties.publiclyAccessible),SecurityGroupIds:cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),SubnetIds:cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),Tags:cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)}):properties}function CfnWorkgroupPropsFromCloudFormation(properties){if(properties=properties??{},typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("workgroupName","WorkgroupName",cfn_parse.FromCloudFormation.getString(properties.WorkgroupName)),ret.addPropertyResult("baseCapacity","BaseCapacity",properties.BaseCapacity!=null?cfn_parse.FromCloudFormation.getNumber(properties.BaseCapacity):void 0),ret.addPropertyResult("configParameters","ConfigParameters",properties.ConfigParameters!=null?cfn_parse.FromCloudFormation.getArray(CfnWorkgroupConfigParameterPropertyFromCloudFormation)(properties.ConfigParameters):void 0),ret.addPropertyResult("enhancedVpcRouting","EnhancedVpcRouting",properties.EnhancedVpcRouting!=null?cfn_parse.FromCloudFormation.getBoolean(properties.EnhancedVpcRouting):void 0),ret.addPropertyResult("namespaceName","NamespaceName",properties.NamespaceName!=null?cfn_parse.FromCloudFormation.getString(properties.NamespaceName):void 0),ret.addPropertyResult("publiclyAccessible","PubliclyAccessible",properties.PubliclyAccessible!=null?cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAccessible):void 0),ret.addPropertyResult("securityGroupIds","SecurityGroupIds",properties.SecurityGroupIds!=null?cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds):void 0),ret.addPropertyResult("subnetIds","SubnetIds",properties.SubnetIds!=null?cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds):void 0),ret.addPropertyResult("tags","Tags",properties.Tags!=null?cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnWorkgroup extends cdk.CfnResource{constructor(scope,id,props){super(scope,id,{type:CfnWorkgroup.CFN_RESOURCE_TYPE_NAME,properties:props});try{jsiiDeprecationWarnings.aws_cdk_lib_aws_redshiftserverless_CfnWorkgroupProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CfnWorkgroup),error}cdk.requireProperty(props,"workgroupName",this),this.workgroupName=props.workgroupName,this.baseCapacity=props.baseCapacity,this.configParameters=props.configParameters,this.enhancedVpcRouting=props.enhancedVpcRouting,this.namespaceName=props.namespaceName,this.publiclyAccessible=props.publiclyAccessible,this.securityGroupIds=props.securityGroupIds,this.subnetIds=props.subnetIds,this.tags=new cdk.TagManager(cdk.TagType.STANDARD,"AWS::RedshiftServerless::Workgroup",props.tags,{tagPropertyName:"tags"})}static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnWorkgroupPropsFromCloudFormation(resourceProperties),ret=new CfnWorkgroup(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}inspect(inspector){try{jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.inspect),error}inspector.addAttribute("aws:cdk:cloudformation:type",CfnWorkgroup.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}get cfnProperties(){return{workgroupName:this.workgroupName,baseCapacity:this.baseCapacity,configParameters:this.configParameters,enhancedVpcRouting:this.enhancedVpcRouting,namespaceName:this.namespaceName,publiclyAccessible:this.publiclyAccessible,securityGroupIds:this.securityGroupIds,subnetIds:this.subnetIds,tags:this.tags.renderTags()}}renderProperties(props){return cfnWorkgroupPropsToCloudFormation(props)}}exports.CfnWorkgroup=CfnWorkgroup,_b=JSII_RTTI_SYMBOL_1,CfnWorkgroup[_b]={fqn:"aws-cdk-lib.aws_redshiftserverless.CfnWorkgroup",version:"2.50.0"},CfnWorkgroup.CFN_RESOURCE_TYPE_NAME="AWS::RedshiftServerless::Workgroup";function CfnWorkgroup_ConfigParameterPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("parameterKey",cdk.validateString)(properties.parameterKey)),errors.collect(cdk.propertyValidator("parameterValue",cdk.validateString)(properties.parameterValue)),errors.wrap('supplied properties not correct for "ConfigParameterProperty"')}function cfnWorkgroupConfigParameterPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnWorkgroup_ConfigParameterPropertyValidator(properties).assertSuccess(),{ParameterKey:cdk.stringToCloudFormation(properties.parameterKey),ParameterValue:cdk.stringToCloudFormation(properties.parameterValue)}):properties}function CfnWorkgroupConfigParameterPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties??{},typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("parameterKey","ParameterKey",properties.ParameterKey!=null?cfn_parse.FromCloudFormation.getString(properties.ParameterKey):void 0),ret.addPropertyResult("parameterValue","ParameterValue",properties.ParameterValue!=null?cfn_parse.FromCloudFormation.getString(properties.ParameterValue):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}
//# sourceMappingURL=redshiftserverless.generated.js.map
